# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.
- **IMPORTANT**: Never overwrite existing .env files - always check if they exist and ask for confirmation before modifying.

## Project Status
- [✅] Initialize Next.js project
- [✅] Setup TailwindCSS and PostCSS
- [✅] Configure ESLint
- [✅] Setup Supabase integration
- [✅] Setup Prisma schema and database connection
- [✅] Implement Authentication with NextAuth
- [✅] Implement Talent Management System
- [✅] Implement Mobile Navigation Menu
- [✅] Complete Role-Based Authorization
- [✅] Create Blog section in homepage + full blog page
- [✅] Complete Blog API routes with CMS functionality
- [✅] Create Footer component
- [✅] Implement public pages (About, Services, Contact)
- [✅] Implement Torch Group section with links to external brands
- [✅] New Hero Section based on updated layout and branding
- [✅] Fix Contact form underline styling
- [✅] Dashboard feature for reordering homepage sections (UI)
- [✅] Implement backend API for section reordering
- [✅] Updated homepage design with full-page background and new hero layout
- [✅] File upload integration with Uploadthing (completed)
- [✅] Email service integration with Resend (HTML templates and notifications implemented)
- [✅] Mobile Responsiveness (completed)
- [✅] Testing Framework (completed)
- [✅] Fix build errors for deployment
- [✅] Create Team Members API routes
- [✅] Create Projects API routes
- [✅] Implement Contact form backend
- [✅] User management API
- [✅] Implement newsletter subscription API
- [⚠️] Complete admin dashboard UI for new features (partially implemented)
- [✅] Connect Contact form with API
- [✅] Connect Newsletter subscription form with API
- [✅] Connect Team Member, Project, and Blog forms with APIs
- [✅] Add About Torch content management in dashboard
- [✅] Update Torch Group section with dynamic content
- [✅] Improve Services section hover effects
- [✅] Update Contact form with phone verification
- [✅] Create Contact Messages dashboard
- [✅] Update Torch Talents section with active talents
- [✅] Implement dynamic button scroll behavior in hero section
- [✅] Refactor Hero Section with improved buttons and scroll functionality
- [✅] Update Blog section title to "Our Blog"
- [✅] Limit Torch Talents to three active talents with placeholders
- [✅] Build Analytics Section with offline fallback
- [✅] API Documentation page
- [✅] Implement testing framework
- [✅] Production Ready (Post Cleanup)
- [✅] Clean up admin/dev scripts after launch
- [✅] Project cleanup: Remove unused files and scripts (2025-06-01)

## Lessons
- Using bcryptjs instead of bcrypt for better cross-platform compatibility
- Always use @/generated/prisma imports instead of @prisma/client for consistent type resolution
- Static rendering is not compatible with pages that use authenticated data
- Next.js middleware needs runtime configuration to avoid Edge Runtime errors with Node.js modules
- For mobile responsiveness, create a separate responsive.css file and import it in the layout to keep responsive styles organized
- Use consistent padding (py-24) for all sections to maintain visual rhythm across the site
- Adjust the viewport meta tag to allow user scaling for better accessibility
- Use fluid typography scaling with different text sizes for mobile vs desktop
- Apply custom responsive grid layouts that adapt from single to multi-column based on screen size
- Use type assertions (as TalentCategory) when working with enum types from Prisma in React components
- Add proper type casts for React key props when iterating over enum values
- Replace the default Next.js starter page with a custom home page for production applications
- Fix CSS references to ensure classes exist in Tailwind config - for example, use 'border' instead of 'border-border'
- When using ShadCn UI, make sure to add borderColor theme in tailwind.config.ts if using border utilities
- For dark-themed designs, use black backgrounds with red accents for Torch branding and subtle animated elements
- Implement mobile navigation with accessible design: ensure proper aria labels, prevent body scroll when menu is open, and add close on click outside functionality
- Role-based authorization should be implemented at multiple levels: middleware for route protection, API routes for endpoint protection, and client components for UI adaptations
- Create necessary SVG assets like grid-pattern.svg for backgrounds to avoid 404 errors
- Use consistent underlines on form inputs to avoid UI glitches and potential visual conflicts
- Match navbar order dynamically with section order for better user experience
- Implement red pulse glow behind centered logo for brand emphasis
- The old hero structure and countdown module are now deprecated
- Set input variants to "minimal" when using custom border styling to avoid double underline effects
- For homepage section reordering, use react-beautiful-dnd with --legacy-peer-deps due to React 19 compatibility issues
- Keep navigation links aligned with homepage sections and in the same order for better UX
- Background design with dotted texture and black/red gradient should be used consistently across all sections for brand identity
- Use consistent global background and maintain design hierarchy with spacing and font scale
- Ensure API routes include proper error handling and consistent response formats
- Define API endpoints with route.ts files in the app/api directory structure
- Implement [id] directory pattern for dynamic routes
- Social media links in footer and header should be configured with actual URLs
- Store site configurations (like section order) in JSON files when database storage isn't necessary
- Use JSON files with fs module for simple data storage when prototyping features
- Add 'nodejs' runtime option to API routes that use Node.js-specific features like fs
- For validation in API routes, using Zod schemas provides consistent error messages
- Implement proper permission checks at the API level for each CRUD operation
- Newsletter subscriptions can be implemented with a simple file-based approach for MVP
- Creating an .env file is critical for local development and deployment
- Uploadthing integration requires proper frontend components to connect with the API
- Dashboard pages should implement consistent UI patterns and error handling
- Implement proper loading states for all API operations
- When using forms, always include proper validation, loading states, and error handling
- For file uploads, integrate UploadThing directly into forms for seamless user experience
- Use custom React Hook Form + Zod validation for all forms to ensure consistent validation and error handling
- Use react-phone-input-2 for international phone number inputs with country code selection
- Implement dynamic content loading for About sections using the JSON file approach
- Fetch up to 3 active talents for the homepage and fill with placeholders when needed
- Implement phone verification UI with a multi-step approach before form submission
- Add smooth scroll behavior for hero buttons linking to different sections
- Create dedicated hooks for each type of content that needs to be managed from the dashboard
- Structure dashboard settings with tabs for different content types
- Create badge components to indicate verification status or record status
- When creating or updating environment files, always check if the file exists first and ask for confirmation before overwriting, as local .env files may contain custom configurations not tracked in Git
- Use fallback file storage for analytics when database is unavailable to ensure uninterrupted data collection
- Always run `prisma generate` as administrator on Windows to avoid file permission errors
- Use Prisma `db pull`
- Implement development mode fallbacks for authentication to enable local development without a database, using hardcoded admin credentials (admin@torchgroup.co/admin) when DATABASE_URL is not defined

## Scratchpad

### Final Deployment Preparation (2025-05-25)
- [X] Created Prisma seed script for sample data
- [X] Updated project documentation including PROMPTS.md
- [X] Updated project status in .cursorrules
- [ ] Complete remaining admin dashboard UI enhancements
- [ ] Implement performance optimizations:
  - [ ] Add caching for API responses
  - [ ] Optimize image loading with priority flags
  - [ ] Add code splitting for large components
  - [ ] Implement Suspense boundaries
- [ ] Final deployment preparation:
  - [ ] Create production environment variables checklist
  - [ ] Set up staging environment for testing
  - [ ] Configure database connection pool settings
  - [ ] Prepare database migration scripts
  - [ ] Create deployment verification process

### Performance Optimization Plan (2025-05-26)
- [ ] Image Optimization:
  - [ ] Add priority flag to LCP images
  - [ ] Implement proper sizing and responsive images
  - [ ] Add blur placeholders for hero images
- [ ] Code Optimization:
  - [ ] Use React.lazy for route-based code splitting
  - [ ] Create bundle analyzer report to identify large dependencies
  - [ ] Reduce unused dependencies
- [ ] API Optimization:
  - [ ] Implement SWR caching for frequently accessed data
  - [ ] Add server-side caching for static content
  - [ ] Optimize database queries with proper indexing

### Admin Dashboard UI Completion (2025-05-27)
- [ ] Analytics Dashboard:
  - [ ] Add date range filtering control
  - [ ] Implement data export functionality
  - [ ] Create additional visualization options
- [ ] Settings Section:
  - [ ] Complete email template management UI
  - [ ] Add user permissions management
  - [ ] Create site configuration management
- [ ] Content Management:
  - [ ] Enhance rich text editor for blog posts
  - [ ] Add bulk actions for content items
  - [ ] Implement better preview functionality

### Development Mode Authentication Fix (2025-05-23)
- [X] Fixed admin login route to handle development mode without a database
- [X] Implemented hardcoded admin credentials (admin@torchgroup.co/admin) for development mode
- [X] Updated admin login page to use correct default credentials
- [X] Created a test file for admin login API to verify functionality
- [X] Fixed test environment setup to properly handle NODE_ENV read-only property
- [X] Updated TESTING.md with comprehensive documentation
- [X] Marked testing framework task as completed in project status

### File Upload Integration (2025-05-22)
- [X] Added attachment field to ContactMessage model in Prisma schema
- [X] Generated updated Prisma client with new field
- [X] Updated contact form API route to handle and store attachment URLs
- [X] Enhanced email notifications to include attachment links
- [X] Updated messages dashboard to display attachments
- [X] Verified existing FileUpload component integration in contact form
- [X] Created comprehensive documentation (FILE_UPLOAD_INTEGRATION.md)
- [X] Marked feature as complete in project status

### Mobile Responsiveness Implementation (2025-05-21)
- [X] Created dedicated responsive.css file for mobile-specific styles
- [X] Updated viewport settings in layout.tsx for better accessibility
- [X] Implemented responsive hero section with adjusted sizing
- [X] Standardized section spacing across the site for visual consistency
- [X] Enhanced button styling and interactions for touch devices
- [X] Improved responsive grid layouts for all sections
- [X] Added responsive typography with adjustments for small screens
- [X] Created comprehensive mobile responsiveness documentation
- [X] Fixed touch interactions for mobile navigation
- [X] Enhanced responsive footer layout
- [X] Created detailed MOBILE_RESPONSIVENESS.md documentation
- [X] Updated VERCEL_DEPLOYMENT_GUIDE.md with deployment instructions
- [X] Created POST_DEPLOYMENT_CHECKLIST.md for production launch