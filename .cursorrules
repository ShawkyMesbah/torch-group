# Cursor Rules

> **Always review this file before starting, editing, or deploying any feature.**
> Also review `TASKMASTER.md` and `PRODUCTION_ENV_CHECKLIST.md` before any major project action.

## Instructions

- Record fixes for mistakes or corrections in the `Lessons` section.
- Organize thoughts and plan steps in the `Scratchpad` section.
- Use todo markers for progress tracking:
  - `[X]` Completed
  - `[ ]` Not started
  - `[P]` In progress
  - `[B]` Blocked
- Add a priority label to each task:
  - `[ðŸ”¥]` Critical/High
  - `[Medium]` Medium
  - `[Low]` Low
- Update the Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.
- **IMPORTANT:** Never overwrite existing .env filesâ€”always check if they exist and ask for confirmation before modifying.

---

## Project Status

### Core Infrastructure âœ…
- [X][ðŸ”¥] Initialize Next.js project
- [X][ðŸ”¥] Setup TailwindCSS and PostCSS
- [X][ðŸ”¥] Configure ESLint
- [X][ðŸ”¥] Setup Supabase integration
- [X][ðŸ”¥] Setup Prisma schema and database connection
- [X][ðŸ”¥] Implement Authentication with NextAuth
- [X][ðŸ”¥] Complete Role-Based Authorization

### Content Management System âœ…
- [X][ðŸ”¥] Implement Talent Management System
- [X][Medium] Create Blog section in homepage + full blog page
- [X][Medium] Complete Blog API routes with CMS functionality
- [X][Medium] Add About Torch content management in dashboard
- [X][Medium] Connect all forms with APIs (Contact, Newsletter, Team, Project, Blog)

### User Interface & Experience âœ…
- [X][ðŸ”¥] Implement Mobile Navigation Menu
- [X][ðŸ”¥] Mobile Responsiveness
- [X][ðŸ”¥] Hero section redesigned to match Torch Star style
- [X][Medium] Implement public pages (About, Services, Contact)
- [X][Medium] Dashboard feature for reordering homepage sections
- [X][Low] Create Footer component
- [X][Low] Fix Contact form underline styling

### Backend & APIs âœ…
- [X][Medium] Create Team Members API routes
- [X][Medium] Create Projects API routes
- [X][Medium] Implement Contact form backend
- [X][Medium] User management API
- [X][Medium] Implement newsletter subscription API
- [X][Medium] Implement backend API for section reordering

### Advanced Features âœ…
- [X][Medium] File upload integration with Uploadthing
- [X][Medium] Email service integration with Resend
- [X][Low] Update Contact form with phone verification
- [X][Medium] Create Contact Messages dashboard
- [X][Medium] Update Torch Talents section with active talents
- [X][Medium] Build Analytics Section with offline fallback

### Performance & Optimization âœ…
- [X][ðŸ”¥] Fix build errors for deployment
- [X][ðŸ”¥] Complete admin dashboard UI for new features
- [X][ðŸ”¥] Optimize image loading (LCP images, blur placeholders, responsive sizes)
- [X][ðŸ”¥] Code split large dashboard components (dynamic imports)
- [X][Medium] Implement SWR caching for frequently accessed data
- [X][Medium] Add server-side caching for static content
- [X][Medium] Optimize database queries with proper indexing
- [X][Medium] Add Suspense boundaries for code-split components
- [X][Low] Reduce unused dependencies

### Testing & Deployment âœ…
- [X][Medium] Testing Framework
- [X][Medium] Set up Playwright testing environment
- [X][Medium] Create tests for critical user flows
- [X][Medium] Implement CI pipeline integration
- [X][ðŸ”¥] Create production environment variables checklist
- [X][ðŸ”¥] Set up staging environment for testing
- [X][ðŸ”¥] Configure database connection pool settings
- [X][ðŸ”¥] Prepare database migration scripts
- [X][ðŸ”¥] Create deployment verification process

### Design System & Consistency âœ…
- [X][ðŸ”¥] Complete Torch Group Spacing & Layout System optimization
- [X][Medium] Complete spacing system migration (blog pages, public pages, key UI components)
- [X][Medium] Created unified design system CSS with color variables and utility classes
- [X][Medium] Updated all sections to use design system classes
- [X][Medium] Updated navigation and form components with design system colors

### Recent Completions âœ…
- [X][ðŸ”¥] Fix animated grid background issue (disappearing after 1 second)
- [X][ðŸ”¥] Add "B2A" card to homepage and services page
- [X][ðŸ”¥] Add Torch brand logos to homepage Torch Group section
- [X][ðŸ”¥] Remove scroll-triggered animations from homepage sections (mobile performance fix)
- [X][Low] API Documentation page
- [X][ðŸ”¥] Production Ready (Post Cleanup)
- [X][Low] Clean up admin/dev scripts after launch
- [X][Low] Project cleanup: Remove unused files and scripts

### Current Active Tasks âš¡
- [P][Medium] Expand services page with detailed info for each service (75% complete - B2B detailed, need B2T/B2A sections)
- [X][Medium] Polish homepage content and layout - Enhanced Engagement & Accessibility (COMPLETED)
- [X][ðŸ”¥] Complete Dashboard Implementation End-to-End (COMPLETED)
- [P][Low] Finish remaining dashboard components and form spacing migration

---

## Development Standards & Best Practices

### Code Standards
- Use TypeScript strict mode for all new code
- Follow the established design system classes (`torch-*` prefix)
- Use semantic spacing names (`comfortable`, `spacious`) over arbitrary values
- Implement proper error boundaries and loading states
- Use SWR for data fetching with proper caching strategies
- Follow the established file structure and naming conventions

### Component Patterns
- Use `torch-section-*` classes for consistent section padding
- Use `torch-container-*` classes for proper content width constraints
- Implement loading states with `<UnifiedLoading />` component
- Use `toast` notifications for user feedback
- Follow the established form validation patterns with React Hook Form + Zod

### API Patterns
- Use proper HTTP status codes and error handling
- Implement rate limiting for public endpoints
- Use role-based authorization middleware
- Include proper CORS configuration
- Return consistent JSON response formats

### Performance Standards
- Use Next.js Image component with proper sizing and priority flags
- Implement code splitting for large components using dynamic imports
- Use Suspense boundaries for async components
- Optimize database queries and use proper indexing
- Implement caching strategies for frequently accessed data

### Security Standards
- Never expose sensitive environment variables to client
- Use proper CSRF protection for forms
- Implement proper session management
- Validate all inputs server-side
- Use secure headers and CSP policies

---

## Current Blockers

- No critical blockers at this time.

---

## Lessons Learned (Key Takeaways)

### Technical Lessons
- Use `bcryptjs` for cross-platform password hashing
- Always use `@/generated/prisma` for consistent type resolution
- Static rendering is incompatible with authenticated data
- Next.js middleware may require runtime config to avoid Edge errors
- Run `prisma generate` as admin on Windows to avoid permission errors
- Use SWR or server-side caching for frequently accessed data

### Development Workflow
- Always check for .env file existence before writing
- Use Suspense and dynamic imports for large dashboard components
- Use toast notifications and loading states for async UI actions
- Use hardcoded admin credentials for dev mode if no DB is present
- Keep mobile styles organized in dedicated responsive system

### Design System
- Use consistent section padding and fluid typography for visual rhythm
- Use type assertions and key props for enum lists in React
- Use semantic spacing names over arbitrary values
- Maintain consistent color usage with `torch-*` utility classes
- Use JSON files for simple config and fallback storage

### Performance & UX
- Use proper image optimization with Next.js Image component
- Implement proper loading states and error boundaries
- Use code splitting for better performance
- Implement proper caching strategies
- Test mobile responsiveness throughout development

---

## Scratchpad

### Next Development Phase (Current) - IN PROGRESS
**Priority**: Medium-Low maintenance and content polish

#### Content Enhancement Tasks
- [P][Medium] **Expand Services Page Details**
  - [X] B2B packages and pricing structure complete
  - [X] B2C section complete with links to Torch Group brands
  - [ ] Add detailed B2T (Business to Talent) information and benefits
  - [ ] Add comprehensive B2A (Business to Alliance) partnership details
  - [ ] Include testimonials or case studies for each service type
  
- [X][Medium] **Homepage Content Polish & Enhanced Engagement**
  - [X] Enhanced hover effects on section titles with smooth animations
  - [X] Reading progress indicator at top of page
  - [X] Quick Start floating CTA after 30% scroll
  - [X] Reading time indicators for blog posts
  - [X] Performance optimizations for older devices
  - [X] Improved accessibility with focus management and screen reader support
  - [X] Enhanced keyboard navigation throughout the site
  - [X] Smooth logo navigation with visual feedback and enhanced UX
  - [ ] Review and refine all section copy for clarity and impact (remaining)
  - [ ] Optimize meta descriptions and SEO content (remaining)
  - [ ] Add dynamic testimonials section (remaining)

#### Technical Maintenance Tasks
- [P][Low] **Complete Spacing System Migration**
  - [X] Main pages and core components migrated
  - [ ] Remaining dashboard form components
  - [ ] Minor UI components (buttons, cards, dialogs)
  - [ ] Final cleanup of hardcoded spacing values

### Future Iterations (Backlog)
**Priority**: Low - post-launch enhancements

#### Feature Enhancements
- [ ][Low] Advanced analytics with custom event tracking
- [ ][Low] Multi-language support (i18n)
- [ ][Low] Advanced file management in dashboard
- [ ][Low] Real-time notifications system
- [ ][Low] Enhanced blog features (tags, categories, search)

#### Performance Optimizations
- [ ][Low] Implement service worker for offline functionality
- [ ][Low] Add edge caching for static assets
- [ ][Low] Optimize bundle size further
- [ ][Low] Implement advanced image optimization strategies

#### UX Improvements
- [ ][Low] Add dark/light theme toggle
- [ ][Low] Implement advanced search functionality
- [ ][Low] Add user preference management
- [ ][Low] Enhanced mobile animations and interactions

### Completed Major Milestones âœ…
- [X] **Production Deployment (2025-06-03)** - Site successfully deployed and stable
- [X] **Performance Optimization (2025-06-03)** - All critical optimizations implemented
- [X] **Admin Dashboard Completion (2025-06-03)** - Full CMS functionality operational
- [X] **Complete Dashboard Implementation End-to-End (2025-01-15)** - Full dashboard system with 8 content types, 24+ API endpoints, professional UI
- [X] **Design System Implementation (2025-01-03)** - Unified spacing and design system
- [X] **Mobile Responsiveness (2025-05-XX)** - Complete mobile optimization
- [X] **Testing Framework (2025-05-XX)** - Jest and Playwright implementation

---

## Environment & Deployment Status

### Production Environment âœ…
- [X] Deployed on Vercel with proper environment variables
- [X] Database connected and optimized
- [X] File uploads working through UploadThing
- [X] Email notifications working through Resend
- [X] Analytics collecting and displaying data
- [X] All security headers and policies configured

### Monitoring & Maintenance âœ…
- [X] Error tracking and logging configured
- [X] Performance monitoring active
- [X] Database backup schedule established
- [X] Health check endpoints operational

---

## Dates & Versioning

- Project started: 2024-12-XX
- Major milestones completed: 2025-06-03
- Current version: Production-ready v1.0
- Last major update: 2025-06-03
- Next planned review: As needed for content updates

---

*This rules file reflects the current production-ready state of the Torch Group website. Focus areas are now content enhancement and minor technical polish rather than major feature development.*