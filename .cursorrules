# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Project Status
- [✔] Initialize Next.js project
- [✔] Setup TailwindCSS and PostCSS
- [✔] Configure ESLint
- [✔] Setup Supabase integration
- [✔] Setup Prisma schema and database connection
- [✔] Implement Authentication with NextAuth
- [✔] Implement Talent Management System
- [ ] Implement Mobile Navigation Menu
- [ ] Complete Role-Based Authorization
- [ ] Implement Blog, Projects, and TeamMember API routes
- [✔] Create Footer component
- [ ] Complete .env configuration
- [ ] Build Analytics Section
- [ ] API Documentation page
- [ ] Mobile Responsiveness

## Lessons
- Using bcryptjs instead of bcrypt for better cross-platform compatibility
- Always use @/generated/prisma imports instead of @prisma/client for consistent type resolution
- Static rendering is not compatible with pages that use authenticated data
- Next.js middleware needs runtime configuration to avoid Edge Runtime errors with Node.js modules
- Use type assertions (as TalentCategory) when working with enum types from Prisma in React components
- Add proper type casts for React key props when iterating over enum values
- Replace the default Next.js starter page with a custom home page for production applications

## Scratchpad

#### Phase 1: Project Setup and Configuration
- [X] Initialize Next.js 15 project with TypeScript
- [X] Configure TailwindCSS and PostCSS
- [X] Set up project structure (pages, components, libs, etc.)
- [X] Install and configure dependencies:
  - [X] Shadcn UI components
  - [X] Lucide icons
  - [X] Zod for schema validation
  - [X] Zustand for state management
  - [X] Resend for email functionality
  - [X] Uploadthing for file uploads
  - [X] Prisma ORM
  - [X] Supabase for PostgreSQL database
  - [X] next-auth@beta for authentication

#### Phase 2: Database and Authentication
- [X] Set up Supabase project and PostgreSQL database
- [X] Define Prisma schema with required models:
  - [X] Users (admin, staff)
  - [X] Pages (home, about, services, etc.)
  - [X] Blog posts
  - [X] Projects/Case studies
  - [X] Team members
  - [X] Contact messages
  - [X] Talents
- [X] Configure Prisma client
- [X] Implement next-auth authentication with Supabase
- [ ] Enhance role-based authorization with proper role checks

#### Phase 3: Frontend Development - Public Website
- [ ] Design and implement layout components
  - [X] Header with navigation
  - [ ] Mobile navigation menu
  - [X] Footer component
  - [ ] Hero sections
  - [ ] CTAs
- [ ] Create public pages:
  - [X] Home page
  - [ ] About page
  - [ ] Services page
  - [ ] Projects/Portfolio page
  - [ ] Team page
  - [ ] Blog with individual post pages
  - [ ] Contact page
- [ ] Implement responsive design
- [ ] Add animations and transitions

#### Phase 4: Admin Dashboard Development
- [X] Create dashboard layout with Shadcn UI
- [X] Implement authentication and authorization checks
- [ ] Build dashboard pages:
  - [X] Dashboard overview
  - [ ] Analytics dashboard
  - [ ] Content management (pages, blog posts)
  - [ ] User management
  - [ ] Project/case study management
  - [ ] Team member management
  - [X] Talent management
  - [ ] Contact message management
- [X] Implement CRUD operations for talents
- [X] Create form components with Zod validation for talents
- [X] Fix TypeScript errors in Talent Management Page

#### Phase 5: Backend API Development
- [X] Implement API routes for talents
- [X] Set up middleware for authentication
- [ ] Implement API routes for blog, projects, and team members
- [ ] Create services for business logic
- [ ] Implement file upload functionality with Uploadthing
- [ ] Configure email sending with Resend
- [ ] Complete .env configuration and check

#### Phase 6: State Management and Integration
- [X] Set up Zustand stores for global state
- [X] Implement data fetching and caching strategies for talents
- [X] Connect frontend to API endpoints for talent management
- [ ] Create hooks for other data models (blog, projects, team)
- [ ] Optimize data loading and performance

#### Phase 7: Testing and Quality Assurance
- [ ] Write unit tests for components and API routes
- [ ] Perform integration testing
- [ ] Test responsiveness across devices
- [ ] Conduct security and performance audits

#### Phase 8: Deployment and Launch
- [ ] Set up CI/CD pipeline
- [ ] Configure production environment
- [ ] Deploy to hosting provider
- [ ] Set up monitoring and error tracking
- [ ] Perform final QA and launch