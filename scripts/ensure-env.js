/**
 * Script to ensure a .env file exists with necessary credentials
 * 
 * This script checks for an existing .env file and creates one with
 * appropriate database credentials if it doesn't exist.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Default values from task
const DEFAULT_DB_URL = 'postgres://postgres.ttzulxpncujgizidgwxk:Spinal_Shit1709@aws-0-us-east-1.pooler.supabase.com:5432/postgres?pgbouncer=true&connection_limit=1';
const DEFAULT_DIRECT_URL = 'postgresql://postgres:Spinal_Shit1709@ttzulxpncujgizidgwxk.supabase.co:5432/postgres?schema=public&sslmode=require';
const DEFAULT_NEXTAUTH_URL = 'http://localhost:3000';
const DEFAULT_NEXTAUTH_SECRET = 'your-nextauth-secret-key-change-this-in-production';

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Function to prompt for confirmation
function confirm(question) {
  return new Promise((resolve) => {
    rl.question(question + ' (y/N): ', (answer) => {
      resolve(answer.toLowerCase() === 'y');
    });
  });
}

// Function to create the env file
async function createEnvFile(envPath) {
  try {
    const envContent = `# Database URLs
DATABASE_URL=${DEFAULT_DB_URL}
DIRECT_URL=${DEFAULT_DIRECT_URL}

# NextAuth Configuration
NEXTAUTH_URL=${DEFAULT_NEXTAUTH_URL}
NEXTAUTH_SECRET=${DEFAULT_NEXTAUTH_SECRET}

# This file was auto-generated by ensure-env.js
# Created at: ${new Date().toISOString()}
`;

    fs.writeFileSync(envPath, envContent);
    console.log(`✅ .env file created successfully at ${envPath}`);
    return true;
  } catch (error) {
    console.error('❌ Error creating .env file:', error.message);
    return false;
  }
}

// Main function
async function main() {
  console.log('---- Environment File Check ----');
  
  const envPath = path.join(process.cwd(), '.env');
  
  // Check if .env file already exists
  if (fs.existsSync(envPath)) {
    console.log('✅ .env file already exists');
    
    // Check if it has the necessary entries
    try {
      const envContent = fs.readFileSync(envPath, 'utf8');
      
      const hasDbUrl = envContent.includes('DATABASE_URL=');
      const hasDirectUrl = envContent.includes('DIRECT_URL=');
      const hasNextAuthUrl = envContent.includes('NEXTAUTH_URL=');
      const hasNextAuthSecret = envContent.includes('NEXTAUTH_SECRET=');
      
      let missingEntries = [];
      if (!hasDbUrl) missingEntries.push('DATABASE_URL');
      if (!hasDirectUrl) missingEntries.push('DIRECT_URL');
      if (!hasNextAuthUrl) missingEntries.push('NEXTAUTH_URL');
      if (!hasNextAuthSecret) missingEntries.push('NEXTAUTH_SECRET');
      
      if (missingEntries.length > 0) {
        console.log(`\n⚠️ Your .env file is missing the following entries: ${missingEntries.join(', ')}`);
        
        const shouldUpdate = await confirm('Would you like to add the missing entries?');
        
        if (shouldUpdate) {
          let updatedContent = envContent;
          
          if (!hasDbUrl) {
            updatedContent += `\nDATABASE_URL=${DEFAULT_DB_URL}`;
          }
          
          if (!hasDirectUrl) {
            updatedContent += `\nDIRECT_URL=${DEFAULT_DIRECT_URL}`;
          }
          
          if (!hasNextAuthUrl) {
            updatedContent += `\nNEXTAUTH_URL=${DEFAULT_NEXTAUTH_URL}`;
          }
          
          if (!hasNextAuthSecret) {
            updatedContent += `\nNEXTAUTH_SECRET=${DEFAULT_NEXTAUTH_SECRET}`;
          }
          
          updatedContent += `\n\n# Updated at: ${new Date().toISOString()}`;
          
          fs.writeFileSync(envPath, updatedContent);
          console.log('✅ .env file updated successfully');
        }
      } else {
        console.log('✅ .env file contains all necessary entries');
      }
    } catch (error) {
      console.error('❌ Error reading .env file:', error.message);
    }
  } else {
    console.log('❌ .env file does not exist');
    
    const shouldCreate = await confirm('Would you like to create a new .env file with default values?');
    
    if (shouldCreate) {
      await createEnvFile(envPath);
    } else {
      console.log('❌ .env file was not created');
    }
  }
  
  // Create a backup of the .env file
  try {
    if (fs.existsSync(envPath)) {
      const backupPath = path.join(process.cwd(), '.env.backup');
      fs.copyFileSync(envPath, backupPath);
      console.log(`✅ Created backup at ${backupPath}`);
    }
  } catch (error) {
    console.error('❌ Error creating backup:', error.message);
  }
  
  // Also create .env.example if it doesn't exist
  try {
    const examplePath = path.join(process.cwd(), '.env.example');
    
    if (!fs.existsSync(examplePath)) {
      const exampleContent = `# Database URLs - Replace with your own values
DATABASE_URL=postgres://user:password@host:port/database?pgbouncer=true&connection_limit=1
DIRECT_URL=postgresql://user:password@host:port/database?schema=public&sslmode=require

# NextAuth Configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-nextauth-secret-key-change-this-in-production

# Created at: ${new Date().toISOString()}
`;

      fs.writeFileSync(examplePath, exampleContent);
      console.log(`✅ .env.example file created for documentation`);
    }
  } catch (error) {
    console.error('❌ Error creating .env.example:', error.message);
  }
  
  rl.close();
}

main().catch(e => {
  console.error('Script error:', e);
  rl.close();
  process.exit(1);
}); 