name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
      NEXTAUTH_SECRET: test-secret
      NEXTAUTH_URL: http://localhost:3000
      SITE_URL: http://localhost:3000

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy

    - name: Run unit tests
      run: npm test

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Run Playwright tests
      run: npx playwright test --project=chromium
      env:
        CI: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: Check performance metrics
      if: success()
      run: |
        echo "Checking performance test results..."
        if grep -q "failed" playwright-report/results.json; then
          echo "Performance tests failed!"
          exit 1
        fi

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run ESLint
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

  visual-regression:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Download baseline screenshots
      uses: actions/download-artifact@v3
      with:
        name: playwright-screenshots
        path: test-results

    - name: Run visual regression tests
      run: npx playwright test --project=chromium visual-regression.test.ts
      env:
        CI: true

    - name: Upload screenshot diffs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: screenshot-diffs
        path: test-results
        retention-days: 7

    - name: Save new screenshots as baseline
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: playwright-screenshots
        path: test-results
        retention-days: 30 